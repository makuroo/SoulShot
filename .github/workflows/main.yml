name: Unity Build & Release

on:
  push:
    branches:
      - main
      
permissions:
  contents: write
  
jobs:
  build:
    name: Build Unity Project
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.version.outputs.VERSION_TAG }}
    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Setup Build Directory
      - name: Prepare Build Environment
        run: |
          mkdir -p "Soul-Shot/Builds/Windows"

      # Cache Library Folder
      - name: Cache Library Folder
        uses: actions/cache@v3
        with:
          path: "Soul-Shot/Library"
          key: Library-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            Library-${{ runner.os }}-

      # Build Unity Project
      - name: Build Unity Project
        id: unity-build
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: "Soul-Shot"
          targetPlatform: StandaloneWindows64
          buildName: "Windows"
          buildsPath: "Builds"
          customParameters: -logFile Build.log

      # Debugging
      - name: Show Build Log
        if: always()
        run: |
          echo "Build log:"
          cat "Soul-Shot/Build.log" || echo "No log file found"
          echo "Build artifacts:"
          find "Soul-Shot/Builds" -type f

      # Archive Build
      - name: Create Build Archive
        if: steps.unity-build.outcome == 'success'
        run: |
          cd "Soul-Shot/Builds"
          zip -r "$GITHUB_WORKSPACE/game-build-${{ github.run_number }}.zip" Windows/*
          echo "BUILD_ZIP=game-build-${{ github.run_number }}.zip" >> $GITHUB_ENV

      # Upload single artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: game-build
          path: ${{ github.workspace }}/game-build-${{ github.run_number }}.zip
          retention-days: 2

      # Version Management
      - name: Update Game Version
        id: version
        run: |
          mkdir -p "Soul-Shot/Assets/Resources"
          GAME_VERSION_FILE="Soul-Shot/Assets/Resources/GameVersion.txt"
          [ -f "$GAME_VERSION_FILE" ] || echo "1.0.0" > "$GAME_VERSION_FILE"
          CURRENT_VERSION=$(cat "$GAME_VERSION_FILE")
          NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. -v OFS=. '{
            if(NF==3){$3+=1}
            print $0
          }')
          echo "$NEW_VERSION" > "$GAME_VERSION_FILE"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=v$NEW_VERSION" >> $GITHUB_OUTPUT

      # Commit Changes
      - name: Commit Version Change
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git fetch origin
          git rebase origin/main
          git add "Soul-Shot/Assets/Resources/GameVersion.txt"
          git commit -m "[CI] Update version to ${{ steps.version.outputs.NEW_VERSION }}"
          git push origin main

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Download Artifact
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: game-build
          path: release-files

      # Create Release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build.outputs.version_tag }}
          name: "Release ${{ needs.build.outputs.version_tag }}"
          body: "Automated build for version ${{ needs.build.outputs.version_tag }}"
          files: release-files/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
